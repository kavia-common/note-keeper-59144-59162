{"is_source_file": true, "format": "TypeScript", "description": "This file defines a React hook `useNotes` that manages the state and CRUD operations of notes, interfacing with API functions to list, create, update, delete, and fetch individual notes. It encapsulates logic for loading, refreshing, and error handling related to notes.", "external_files": ["@/lib/types", "@/lib/mockNotesApi"], "external_methods": ["listNotes", "createNote", "updateNote", "deleteNote", "getNote"], "published": ["useNotes", "UseNotesResult"], "classes": [], "methods": [{"name": "export function useNotes(): UseNotesResult { useNotes", "description": "Custom React hook that provides note management functionalities including loading, creating, updating, deleting, refreshing, and fetching notes by ID with internal state management.", "scope": "", "scopeKind": ""}], "calls": ["listNotes()", "createNote({ title, content })", "updateNote(id, { title, content })", "deleteNote(id)", "getNote(id)"], "search-terms": ["useNotes", "notes_frontend", "hooks", "react", "note management", "mockNotesApi", "useCallback", "useEffect"], "state": 2, "file_id": 14, "knowledge_revision": 29, "git_revision": "", "ctags": [{"_type": "tag", "name": "Status", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^type Status = \"idle\" | \"loading\" | \"success\" | \"error\";$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "UseNotesResult", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^export interface UseNotesResult {$/", "language": "TypeScript", "kind": "interface"}, {"_type": "tag", "name": "create", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  create: (title: string, content: string) => Promise<Note | null>;$/", "language": "TypeScript", "kind": "property", "scope": "UseNotesResult", "scopeKind": "interface"}, {"_type": "tag", "name": "createHandler", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  const createHandler = useCallback(async (title: string, content: string) => {$/", "language": "TypeScript", "kind": "constant", "scope": "useNotes", "scopeKind": "function"}, {"_type": "tag", "name": "error", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  const [error, setError] = useState<string | null>(null);$/", "language": "TypeScript", "kind": "constant", "scope": "useNotes", "scopeKind": "function"}, {"_type": "tag", "name": "error", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  error: string | null;$/", "language": "TypeScript", "kind": "property", "scope": "UseNotesResult", "scopeKind": "interface"}, {"_type": "tag", "name": "getById", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  const getById = useCallback(async (id: NoteID) => {$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "getById", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  getById: (id: NoteID) => Promise<Note | null>;$/", "language": "TypeScript", "kind": "property", "scope": "UseNotesResult", "scopeKind": "interface"}, {"_type": "tag", "name": "load", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  const load = useCallback(async () => {$/", "language": "TypeScript", "kind": "constant", "scope": "useNotes", "scopeKind": "function"}, {"_type": "tag", "name": "notes", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  const [notes, setNotes] = useState<Note[]>([]);$/", "language": "TypeScript", "kind": "constant", "scope": "useNotes", "scopeKind": "function"}, {"_type": "tag", "name": "notes", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  notes: Note[];$/", "language": "TypeScript", "kind": "property", "scope": "UseNotesResult", "scopeKind": "interface"}, {"_type": "tag", "name": "refresh", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  const refresh = useCallback(async () => {$/", "language": "TypeScript", "kind": "constant", "scope": "useNotes", "scopeKind": "function"}, {"_type": "tag", "name": "refresh", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  refresh: () => Promise<void>;$/", "language": "TypeScript", "kind": "property", "scope": "UseNotesResult", "scopeKind": "interface"}, {"_type": "tag", "name": "refreshing", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  const [refreshing, setRefreshing] = useState(false);$/", "language": "TypeScript", "kind": "constant", "scope": "useNotes", "scopeKind": "function"}, {"_type": "tag", "name": "refreshing", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  refreshing: boolean;$/", "language": "TypeScript", "kind": "property", "scope": "UseNotesResult", "scopeKind": "interface"}, {"_type": "tag", "name": "remove", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  remove: (id: NoteID) => Promise<boolean>;$/", "language": "TypeScript", "kind": "property", "scope": "UseNotesResult", "scopeKind": "interface"}, {"_type": "tag", "name": "removeHandler", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  const removeHandler = useCallback(async (id: NoteID) => {$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "setError", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  const [error, setError] = useState<string | null>(null);$/", "language": "TypeScript", "kind": "constant", "scope": "useNotes", "scopeKind": "function"}, {"_type": "tag", "name": "setNotes", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  const [notes, setNotes] = useState<Note[]>([]);$/", "language": "TypeScript", "kind": "constant", "scope": "useNotes", "scopeKind": "function"}, {"_type": "tag", "name": "setRefreshing", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  const [refreshing, setRefreshing] = useState(false);$/", "language": "TypeScript", "kind": "constant", "scope": "useNotes", "scopeKind": "function"}, {"_type": "tag", "name": "setStatus", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  const [status, setStatus] = useState<Status>(\"idle\");$/", "language": "TypeScript", "kind": "constant", "scope": "useNotes", "scopeKind": "function"}, {"_type": "tag", "name": "status", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  const [status, setStatus] = useState<Status>(\"idle\");$/", "language": "TypeScript", "kind": "constant", "scope": "useNotes", "scopeKind": "function"}, {"_type": "tag", "name": "status", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  status: Status;$/", "language": "TypeScript", "kind": "property", "scope": "UseNotesResult", "scopeKind": "interface"}, {"_type": "tag", "name": "update", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  update: (id: NoteID, title: string, content: string) => Promise<Note | null>;$/", "language": "TypeScript", "kind": "property", "scope": "UseNotesResult", "scopeKind": "interface"}, {"_type": "tag", "name": "updateHandler", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^  const updateHandler = useCallback(async (id: NoteID, title: string, content: string) => {$/", "language": "TypeScript", "kind": "constant", "scope": "useNotes", "scopeKind": "function"}, {"_type": "tag", "name": "useNotes", "path": "/home/kavia/workspace/code-generation/note-keeper-59144-59162/notes_frontend/src/hooks/useNotes.ts", "pattern": "/^export function useNotes(): UseNotesResult {$/", "language": "TypeScript", "kind": "function"}], "hash": "ccbfbb2d839ed1d1ed3428ad33c1a747", "format-version": 4, "code-base-name": "notes_frontend", "filename": "notes_frontend/src/hooks/useNotes.ts", "fields": [{"name": "export interface UseNotesResult {", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "create: (title: string, content: string) => Promise<Note | null>;", "scope": "UseNotesResult", "scopeKind": "interface", "description": "unavailable"}, {"name": "error: string | null;", "scope": "UseNotesResult", "scopeKind": "interface", "description": "unavailable"}, {"name": "getById: (id: NoteID) => Promise<Note | null>;", "scope": "UseNotesResult", "scopeKind": "interface", "description": "unavailable"}, {"name": "notes: Note[];", "scope": "UseNotesResult", "scopeKind": "interface", "description": "unavailable"}, {"name": "refresh: () => Promise<void>;", "scope": "UseNotesResult", "scopeKind": "interface", "description": "unavailable"}, {"name": "refreshing: boolean;", "scope": "UseNotesResult", "scopeKind": "interface", "description": "unavailable"}, {"name": "remove: (id: NoteID) => Promise<boolean>;", "scope": "UseNotesResult", "scopeKind": "interface", "description": "unavailable"}, {"name": "status: Status;", "scope": "UseNotesResult", "scopeKind": "interface", "description": "unavailable"}, {"name": "update: (id: NoteID, title: string, content: string) => Promise<Note | null>;", "scope": "UseNotesResult", "scopeKind": "interface", "description": "unavailable"}], "revision_history": [{"29": ""}]}